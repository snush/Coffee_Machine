type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: "def remainder(resources):\n    print(\"The coffee machine has:\")\n    print(str(resources[0])\
    \ + \" of water\")\n    print(str(resources[1]) + \" of milk\")\n    print(str(resources[2])\
    \ + \" of coffee beans\")\n    print(str(resources[3]) + \" of disposable cups\"\
    )\n    print(str(resources[4]) + \" of money\")\n\ndef buy(resources):\n    espresso\
    \ = [250, 0, 16, 1, 4]\n    latte = [350, 75, 20, 1, 7]\n    cappuccino = [200,\
    \ 100, 12, 1, 6]\n    \n    print(\"What do you want to buy? 1 - espresso, 2 -\
    \ latte, 3 - cappuccino, back - to main menu:\")\n    answer = input()\n    if\
    \ answer == \"1\":\n        make(espresso)\n    elif answer == \"2\":\n      \
    \  make(latte)\n    elif answer == \"3\":\n        make(cappuccino)\n        \n\
    def make(coffee):\n    ingredients = [\"water\", \"milk\", \"coffee beans\", \"\
    cups\"]\n    if resources[0] < coffee[0]:\n        print(\"Sorry, not enough water!\"\
    )\n    elif resources[1] < coffee[1]:\n        print(\"Sorry, not enough milk!\"\
    )\n    elif resources[2] < coffee[2]:\n        print(\"Sorry, not enough coffee\
    \ beans!\")\n    elif resources[3] < coffee[3]:\n        print(\"Sorry, not enough\
    \ cups!\")\n    else:\n        print(\"I have enough resources, making you a coffee!\"\
    )\n        resources[0] -= coffee[0]\n        resources[1] -= coffee[1]\n    \
    \    resources[2] -= coffee[2]\n        resources[3] -= coffee[3]\n        resources[4]\
    \ += coffee[4]\n        \n    \ndef fill(resources):\n    print(\"Write how many\
    \ ml of water do you want to add:\")\n    resources[0] += int(input())\n    print(\"\
    Write how many ml of milk do you want to add:\")\n    resources[1] += int(input())\n\
    \    print(\"Write how many grams of coffee beans do you want to add:\")\n   \
    \ resources[2] += int(input())\n    print(\"Write how many disposable cups of\
    \ coffee do you want to add:\")\n    resources[3] += int(input())\n \ndef take(resources):\n\
    \    print(\"I gave you $\" + str(resources[4]))\n    resources[4] = 0\n    \n\
    resources = [400, 540, 120, 9, 550]\n\nprint(\"Write action (buy, fill, take,\
    \ remaining, exit):\")\nanswer = input()\nwhile answer != \"exit\":\n    if answer\
    \ == \"buy\":\n        buy(resources)\n    elif answer == \"fill\":\n        fill(resources)\n\
    \    elif answer == \"take\":\n        take(resources)\n    elif answer == \"\
    remaining\":\n        remainder(resources)\n    answer = input()"
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: 5
